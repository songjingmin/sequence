[1]关于在Sublime上输入/出程序以及 Terminal上执行python程序

①现在Python3下print输入格式改为 print(“.....”)了
②在Terminal上执行Python程序时要先将Shell命令切换到python3对应文件目录下（比如Python3文件保存在桌面 Python-code文件夹下 文件名为"ex1.py",
在终端执行命令为：cd 桌面/Python-code ;然后输入 python3 ex1.py 执行  注：返回上一级命令是：cd - or cd ..)
③同理，在linux下将本地代码上传到github首先要在（Terminal）终端上cd到目标文件夹，然后依次输入git init（本机上初始化一个新的git仓库)
④命名方式：Python 文件最好以 .py结尾  (如果要在Sublime上执行python程序，首先要建立一个文件（.py格式的），然后使用 “ Save” 或者“ Save As...”选项选择这个目录并保存，
执行时使用“ctrl+b”即可build了

  注意：无论输出显示什么只要以 print 开头，后面一定要加上() （圆括号）

[2]注释和井号

①注释符号-- “#”（中文为井号,英文为 octothorpe) 
作用：想要临时移除一段代码时,可以用注解的方式将这段代码临时禁用（# 后面的代码将会被注解掉）
②如果要进行多行注解的话，在每行代码前面放一个 # 就可以了。


[3]数字和数学计算

①各运算符的优先级（PEMDAS）为：括号，指数，乘，除，加，减

② * 代表乘以; % 代表取余数 （如:25*3%4=3) 注：/ 表示除以，和 % 别混淆， / 和 // 在python3中的区别是什么？

③要想直接得到运算结果如：4%2=0, 在print的时候直接print(4%2),不用在（）括号里加“”双引号


[4]变量和命名

①变量是用来指代某个东西的名字，使用变量名尅使程序读起来更像英语	（定义变量时变量名要以字母开头，如a1 = '...' )

②关于 x=100 和 x = 100 写法区别：前者是可以这样写,但这种写法不好。操作符两边加上空格会让代码更容易阅读。

③如果使用了非 ASCII 字符而且碰到了编码错误,记得在最顶端加一行 	 。

[5]更多的变量和打印

①字符串是程序将信息展示出来的方式（“把一个文本引用起来，即建立了一个字符串“） 学会打印字符串并将它们写入文件中

②一些”格式控制工具“：%s %r %d (%s 表示把右边的变量带到字符串中,并且把变量值放到 %s 所在的位置上; %r 表示”不管什么都要打印出来”）

[6]字符串（string) 和文本

①字符串通常是指你想要展示给别人的、或者是你想要从程序里“导出”的一小段字符。 Python 可以通过文本里的双引号 " 或者单引号 ' 识别出字符串来。

②w 和 e 表示两个字符串，把它俩用“+”连起来就可以生成一个更长的字符串来

③%r 和 %s 区别：%r 用来做 debug 比较好,因为它会显示变量的原始数据( raw data ),而其它的符号则是用来向用户显示输出的。

<<<<<<< HEAD
④如果要在字符串中通过格式化字符放入多个变量的时候,需要将 %后面的变量放到 ( ) 圆括号中,而且变量之间用 , 逗号隔开。

  注意：当看到%后面有' '时里面的内容不是变量而是一个字符串，（变量是不会带引号的）

⑤创建字符串时使用单引号和双引号都可以,不过一般单引号会被用来创建简短的字符串,例如 ‘ a’ 、 ‘ snow’这样的。

⑥print 输出月份时怎样将月份显示在新的一行：字符串以 \n 开始就可以了，例如 months = "Jan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"
 在三引号之间加入空格就会出错：必须写成 """ 而不是 " " " ,引号之间不能有空格。	

补充：Python中的一些转义序列用法：\\代表反斜杠\; \t代表水平制表符 （注意：斜杠/和反斜杠\是两个不一样的字符，功能也不一样）

[7] 参数、解包和变量

①平时写的 .py的程序即称为“脚本”，命令行运行的 python ex13.py（中的 ex13.py部分就是所谓的“参数 (argument)”）	

②使用“import"语句：将python 的功能引入你的脚本的方法，"argv"即代表”参数变量“，这个变量包含了你传递给 Python 的参数。
将 argv “ 解包 (unpack)”可以理解为：将每个参数赋予一个变量名（将所有的参数依次赋予左边的变量名: script, first, second, third = argv)
命令行执行命令如：python3 import_argv.py first 2nd 3rd	

③把从sys(可以理解为"代码库"）导入（import)进来的功能叫做“模组”（类似说法：“你需要把 sys 模组 import 进来。）	
（注意：argv 和 input() 不能合起来用）
 
=======
④ python2中的 raw_input() 用来获取控制台的输入，python3改为了input()。	

input() 将所有输入作为字符串看待，返回字符串类型。
>>>>>>> eb60894e82190389ef5fe1ae8b83a17f77eb45a6

(注：在命令行运行指在终端中运行代码，不是Sublime上面）

[8]读取文件	

注：处理文件需要非常仔细,如果不仔细的话,你可能会把有用的文件弄坏或者清空，导致前功尽弃。
① 使用argv 和input 是为了从用户获取信息,知道哪些文件该被处理。
 txt = open(filename)  ( 关于 open 命令：它会接受一个参数,并且返回一个值,你可以将这个值赋予一个变量。这就是你打开文件的过程。）
（注意：open返回的不是文件的内容，它返回的是一个叫做“ file object” 的东西,你可以把它想象成一个磁带机或者 DVD 机。你可以随意访问内容的任意位置,
并且去读取这些内容,不过这个 object 本身并不是它的内容。）

>>>>>>>>>>关于供脚本ex.py读取的文本文件：ex_sample（样本）.txt ，这个文件不是脚本			
② 调用read函数：  print txt.read()  （在txt上调用了一个函数，从open 获得的东西是一个 file ( 文件 ) ,文件本身也支持一些命令。

 它接受命令的方式是使用句点 .紧跟着你的命令,然后是类似 open 和 raw_input 一样的参数。不同点是:当写 txt.read 时,你的意思其实是:“嘿 txt !执行你的 read 命令,无需任何参数!”）	

③ from sys import argv 意思是从sys代码库里取出 argv 这个功能来,供程序员使用。


[9] 命名、变量、代码、函数

① 函数的用途有3方面：1. 它们给代码片段命名,就跟“变量”给字符串和数字命名一样。
   2. 它们可以接受参数,就跟你的脚本接受 argv 一样。
   3. 通过使用 #1 和 #2 ,它们可以让你创建“微型脚本”或者“小命令”。


② 使用def来新建函数 用到的命令：def+函数名称（函数的名称要能够体现出函数的功能来）
③ def print_two(*args):告诉函数我们需要 *args，这和脚本的 argv 非常相似,参数必须放在圆括号 () 中才能正常工作;然后使用 冒号 : 结束本行,然后开始下一行缩进。

④ 调用函数 (call the function)

===============================

简明 Python 教程

[7] 函数

① 简介：函数是重用的程序段。它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。这被称为 调用 函数

②定义函数：函数通过def关键字定义。def关键字后跟一个函数的 标识符 名称，然后跟一对圆括号。圆括号之中可以包括一些变量名，该行以冒号结尾。接下来是一块语句，它们是函数体。
（函数后面括号中的参数对于函数而言，只是给函数的输入，以便于我们可以传递不同的值给函数，然后得到相应的结果。）


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 主要是函数体（语句块）函数名称即冒号：后面 语句块 名称

③关于函数形参：函数中的参数名称为 形参;
实参：而你提供给函数调用的值称为 实参 。

④ 局部变量：当在函数定义内声明变量的时候，它们与函数外具有相同名称的其他变量没有任何关系，即变量名称对于函数来说是局部的。这称为变量的作用域。
所有变量的作用域是它们被定义的块，从它们的名称被定义的那点开始。

使用global语句来 声明全局变量：如果想要为一个定义在函数外的变量赋值，就得告诉Python这个变量名不是局部的，而是 全局 的。我们使用global语句完成这一功能。
可以使用同一个global语句指定多个全局变量。例如global x, y, z。


⑤默认参数值：对于一些函数的一些参数可能希望是可选的，如果用户不想要为这些参数提供值的话，这些参数就使用默认值。这个功能借助于默认参数值完成。
注意，默认参数值应该是一个参数。更加准确的说，默认参数值应该是不可变的/////另外：只有在形参表末尾的那些参数可以有默认参数值，即你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参。
这是因为赋给形参的值是根据位置而赋值的。例如，def func(a, b=5)是有效的，但是def func(a=5, b)是 无效 的。

⑥关键参数：如果某个函数有许多参数，而我们只想指定其中的一部分，那么可以通过命名来为这些参数赋值——这被称作 关键参数 ——我们使用名字（关键字）而不是位置（我们前面所一直使用的方法）来给函数指定实参。

⑦return 语句：return语句用来从一个函数 返回 即跳出函数;我们也可选从函数 返回一个值 。

注意：没有返回值的return语句等价于return None。None是Python中表示没有任何东西的特殊类型。例如，如果一个变量的值为None，可以表示它没有值

除非你提供你自己的return语句，每个函数都在结尾暗含有return None语句。通过运行print someFunction()，你可以明白这一点，函数someFunction没有使用return语句，
如同：def someFunction():
    pass    -----------pass语句在Python中表示一个空的语句块。

======================================
len() 函数的功能是什么?
它会以数字的形式返回你传递的字符串的长度。

[控制流]

① if语句：if语句用来检验一个条件，如果条件为真，我们运行一块语句（称为if-块），否则我们处理另外一块语句（成为else-块）。else从句是可选的。

========================<1>input(....)函数：将所提供的字符串打印在屏幕上，等待用户的输入。
<2>int类：它把一个字符串转换为一个整数（假设这个字符串含有一个有效的整数文本信息）。

<3>缩进层次：使用缩进层次来告诉Python每个语句分别属于哪一个块。规则是：“每个缩进层一个制表符”

>>>>>>>>>>>>>>>>>>>>> elif从句:它事实上把两个相关联的if else-if else语句合并为一个if-elif-else语句。这使得程序更加简单，并且减少了所需的缩进数量。（注意：elif和else从句都必须在逻辑行结尾处有一个冒号，
下面跟着一个相应的语句块（当然还包括正确的缩进）。）

②while语句：只要在一个条件为真的情况下，while语句允许你重复执行一块语句。while语句是所谓 循环 语句的一个例子。while语句有一个可选的else从句。

③for循环：for..in是另外一个循环语句，它在一序列的对象上 递归 即逐一使用队列中的每个项目。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>使用range函数来返回一个序列的数：这个序列从第一个数开始到第二个数为止。例如，range(1,5)给出序列[1, 2, 3, 4] （㊟：range 向上 延伸到第二个数，即它不包含第二个数。）

for循环在这个范围内递归——for i in range(1,5)等价于for i in [1, 2, 3, 4]，这就如同把序列中的每个数（或对象）赋值给i，一次一个，然后以每个i的值执行这个程序块。

============================ 记住：（for..in循环对于任何序列都适用：广义说来我们可以使用任何种类的由任何对象组成的序列！）


④ break语句：break语句是用来 终止 循环语句的，即哪怕循环条件没有称为False或序列还没有被完全递归，也停止执行循环语句。

一个重要的注释是，如果你从for或while循环中 终止 ，任何对应的循环else块将不执行============ 记住：break语句也可以在for循环中使用

⑤ continue语句：continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后 继续 进行下一轮循环。

注意，continue语句对于for循环也有效。


[8] 模块

①简介：模块基本上就是一个包含了所有你定义的函数和变量的文件。为了在其他程序中重用模块，㊟ 模块的文件名必须以.py为扩展名。
-----模块可以从其他程序 输入 以便利用它的功能。这也是我们使用Python标准库的方法。

>>>>>>>>>>>>>>>>>>>>>>>from..import语句：如果你想要直接输入argv变量到你的程序中（避免在每次使用它时打sys.），那么你可以使用from sys import argv语句。如果你想要输入所有sys模块使用的名字，那么你可以使用from sys import *语句。这对于所有模块都适用。一般说来，应该避免使用from..import而使用import语句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。

②模块的__name__ ：每个模块都有一个名称，在模块中可以通过语句来找出模块的名称。这在一个场合特别有用——就如前面所提到的，当一个模块被第一次输入的时候，这个模块的主块将被运行。

  假如我们只想在程序本身被使用的时候运行主块，而在它被别的模块输入的时候不运行主块，这可以通过模块的__name__属性完成。

-------每个Python模块都有它的__name__，如果它是'__main__' （即__name__ == '__main__'，这说明这个模块被用户单独运行，我们可以进行相应的恰当操作。	


[9] 数据结构

①简介：数据结构基本上就是——它们是可以处理一些 数据 的 结构 。或者说，它们是用来存储一组相关数据的。

在Python中有三种内建的数据结构——列表、元组和字典。

② 列表：list是处理一组有序项目的数据结构，即你可以在一个列表中存储一个 序列 的项目。
列表中的项目应该包括在方括号中，这样Python就知道你是在指明一个列表。一旦你创建了一个列表，你可以添加、删除或是搜索列表中的项目。由于你可以增加或删除项目，我们说列表是 可变的 数据类型，即这种类型是可以被改变的。

=============================(1)类也有方法，即仅仅为类而定义地函数。仅仅在你有一个该类的对象的时候，你才可以使用这些功能
(2)一个类也有域，它是仅仅为类而定义的变量。仅仅在你有一个该类的对象的时候，你才可以使用这些变量/名称。 类也通过点号使用，例如mylist.field

③关于列表：<1> 使用append方法在列表中添加了一个项目，如 shoplist.append('rice')

<2> 使用列表的sort方法来对列表排序。需要注意的是：这个方法影响列表本身，而不是返回一个修改后的列表——这与字符串工作的方法不同。这就是所说的列表是 可变的; 而字符串是 不可变的 。

<3> 如果想要删除列表中的第一个元素，我们使用del shoplist[0]（记住，Python从0开始计数）。


④ 元组：元组和列表十分类似，只不过元组和字符串一样是 不可变的 即你不能修改元组。元组通过圆括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变。

元组也是一个序列，可以使用len函数来获取元组的长度

=============================一个空的元组由一对空的圆括号组成，如myempty = ()  =============如果是含有单个元素的元组，必须在第一个（唯一一个）项目后跟一个逗号，

这样Python才能区分元组和表达式中一个带圆括号的对象。即如果你想要的是一个包含项目2的元组的时候，你应该指明singleton = (2 , )。


⑤ 字典：把键（名字）和值（详细情况）联系在一起，类似于通过联系人名字查找地址和联系人详细情况的地址簿。

============================= 注意：你只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以不可变或可变的对象作为字典的值。基本说来就是，你应该只使用简单的对象作为键。

键值对在字典中以这样的方式标记：d = {key1 : value1, key2 : value2 }。注意它们的键/值对用冒号分割，而各个对用逗号分割，所有这些都包括在花括号中。

（※ 记住字典中的键/值对是没有顺序的※  如果你想要一个特定的顺序，那么你应该在使用前自己对它们排序。 -------字典是dict类的实例/对象）

※ 当查找字典中的“值”时只能通过对应的“键”来找，例：ab = {a : b, c : d} =========b值即为ab[a} 而不是ab[1]


<1> 可以使用索引操作符来寻址一个键并为它赋值，这样就增加了一个新的键/值对;  使用字典的items方法，来使用字典中的每个键/值对。这会返回一个元组的列表，其中每个元组都包含一对项目——键与对应的值

<2> 使用in操作符来检验一个键/值对是否存在(如if 'a' in ab:)，或者使用dict类的has_key方法 

⑥序列：列表、元组和字符串都是序列，索引操作符让我们可以从序列中抓取一个特定项目。切片操作符让我们能够获取序列的一个切片，即一部分序列。

<1>(Python从0开始计数) 因此，shoplist[0]抓取第一个项目，shoplist[3]抓取shoplist序列中的第四个元素。
<2> 索引同样可以是负数，在那样的情况下，位置是从序列尾开始计算的。因此，shoplist[-1]表示序列的最后一个元素而shoplist[-2]抓取序列的倒数第二个项目。

<3> 切片操作符是序列名后跟一个方括号，方括号中有一对可选的数字，并用冒号分割; 切片操作符中的第一个数（冒号之前）表示切片开始的位置，第二个数（冒号之后）表示切片到哪里结束。如果不指定第一个数，Python就从序列首开始。如果没有指定第二个数，则Python会停止在序列尾。注意，返回的序列从开始位置 开始 ，刚好在 结束 位置之前结束。即开始位置是包含在序列切片中的，而结束位置被排斥在切片外。

======================shoplist[:]返回整个序列的拷贝

<4>你可以用负数做切片。负数用在从序列尾开始计算的位置。例如，shoplist[:-1]会返回除了最后一个项目外包含所有项目的序列切片。

>>>>>>>>>>>>>>>>>>>>>>>>> 参考：当你创建一个对象并给它赋一个变量的时候，这个变量仅仅 参考 那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。









